function plotForce(subj)

% addpath(genpath('D:\projects\rhys\movementDynamics\matlab\'));
% addpath(genpath('D:\projects\rhys\movementDynamics\data\'));
% addpath(genpath('D:\projects\toolboxes\userfun')); %joern's util tools (open source)

%PERFORMS:
%
%   Loop through blocks, trials.
%       Spit out area under the curve calculations within participants, specified by varargin.
%   Determine finger order from ordseq in behavioural file.
%   Saves Force thresholded force data and peak calculations.
%
%--------------------------------------------------------------------------------------------------------------------------


% if subj == 1 || subj == 2 || subj == 3 || subj == 9 || subj == 11; %subjects whose data was not analysed in ave file
%     
%     disp('Invalid subject number. Please check subjects to be analysed.')
%     return
% end

subjName={'s01','s02','s03','s04','s05','s06','s07','s08','s09','s10',...
    's11','s12','s13','s14','s15','s16','s17','s18','s19','s20','s21','s22','s23',...
    's24','s25','s26','s27','s28','s29','s30','s31','s32','s33','s34','s35','s36',...
    's37','s38','s39','s40','s41','s42','s43','s44','s45','s46','s47','s48','s49',...
    's50','s51','s52','s53','s54','s55','s56','s57','s58','s59','s60'}; %% chronological without missing subject numbers, for later vector references

subj_equivList = [1 0; 2 0; 3 1; 4 2; 5 3; 6 4; 7 5; 8 6; 9 0; 10 7; 11 0; 12 8; 13 9; 14 10; 15 11; 16 12; 17 13;...
    18 14; 19 15; 20 16; 21 17; 22 18; 23 19; 24 20; 25 21; 26 22; 27 23; 28 24; 29 25; 30 26; 31 27;...
    32 28; 33 29; 34 30; 35 31; 36 32]; %subject equivalents to those contained in the ave file

equivlistIndex = subj_equivList(:,1) == subj; %find ave equivalent to varargin
subj_equiv = subj_equivList(equivlistIndex,2);

blockN = {'01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', ... %block numbers
    '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', ...
    '26', '27','28','29','30','31','32','33','34','35','36','37','38','39',  ...
    '40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55'...
    ,'56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71',...
    '72','73','74','75','76','77','78','79','80','81','82','83'};


baseDir = 'D:\projects\rhys\movementDynamics\data\behavioural'; %save location

D=load([baseDir '\tempord1_ave.mat']);


for i=1:length(blockN) %loop through subject's blocks and load into workspace 'move' variable
    datafilename=['to3_' subjName(subj) '_' blockN(i) '.mat'];
    datafilename = strjoin(datafilename, '');
    
    try
        if i == 1 %on first loop, create 'move' variable
            load(datafilename) %load block, *****to be incorporated into block loading loop*****
            move = MOV';
            
            
        else
            load(datafilename)
            move = [move; MOV'];
        end
    catch
        disp(sprintf('%s not loaded. Check file location and presence.', datafilename))
    end
    
    
    
    
end

if (isempty(move)) %if move contains nothing, exit script
    disp('No data available')
    return;
end;

% for i=fieldnames(D)
%     for j = 1:length(fieldnames(D))
%         F(i{j}) = D.(i{j})(findrow(D.subj,subj));
%     end
% end


F.move = move; %create F struct to contain subject-specific analysis
fields = fieldnames(D);

for i=1:length(fields)
    F.(fields{i}) = D.(fields{i})(findrow(D.subj,subj_equiv),:);
end


for trial=1:length(F.move)
    
    order = F.ordseq(trial, :); %determine finger order from ave file
    
    if F.handGroup(trial) == 1; %check which hand group the subject corresponds to and analyse accordingly
        %analyse x channels
        prodChannels = 9:13;
    elseif F.handGroup(trial) == 2;
        %analyse y channels
        prodChannels = 4:8;
    end
    
    force = F.move{trial}(:, prodChannels); %load channels of target trial into new force matrix
    
    
    baselineThreshold = 200; %select theshold length in n samples
    rawThresh = force(1:baselineThreshold,:); %select raw data to use for thresholding
    
    meanThresh = zeros(1,5); %pre-allocate holder for averaging
    for i=1:5 %calculate threshold per channel
        meanThresh(i) = mean(rawThresh(:,i));
    end
    
    %thresholding
    force1 = force(:,order(1)) - meanThresh(order(1)); %new variables for each channel, ordered according to ordseq
    force2 = force(:,order(2)) - meanThresh(order(2));
    force3 = force(:,order(3)) - meanThresh(order(3));
    force4 = force(:,order(4)) - meanThresh(order(4));
    force5 = force(:,order(5)) - meanThresh(order(5));
    
    threshForce = [force1 force2 force3 force4 force5];
    threshForce(threshForce < 0) = 0; %set lowest value to 0, remove negative readings
    
    targetChannels = [1 2; 2 3; 3 4; 4 5];
    peakCounter = 1;
    
    for intervals = 1:4
        
        peak = zeros(1,2); %pre-allocate variable for loop
        j=1; %within-loop counter
        for i = targetChannels(intervals,:) %find the peaks of two adjacent presses
            
            [~, peak(j)] = max(threshForce(:,i)); %find the location of the press peaks and assign them to 'peak' variable
            j=j+1;
            
        end
        
        F.threshForce{trial,:} = threshForce;
        
        threshPeak1 = threshForce(:, targetChannels(intervals,1));
        threshPeak2 = threshForce(:, targetChannels(intervals,2));
        
        peak1 = threshPeak1(peak(1):peak(2))';
        peak2 = threshPeak2(peak(1):peak(2))';
        
        F.peaks{trial, peakCounter} = peak1;
        peakCounter = peakCounter + 1;
        
        F.peaks{trial, peakCounter} = peak2;
        peakCounter = peakCounter + 1;
        
        overlapPlot = [peak2(peak2<peak1) peak2(peak2==peak1) peak1(peak1<peak2)];
        F.overlapMeasure{trial, intervals} = overlapPlot;
        
        F.areaInt(trial,intervals) = trapz(overlapPlot);
    end
    
    F.areaIntAvg(trial,:) = mean(F.areaInt(trial,:));
end

save(sprintf('%s_overlap_data', subj_name{subj}),'F') %area_int, peaks, overlapPlot, thresholded force data to .mat file
disp(sprintf('%s done', subj_name{subj}))

%--------------------------------------------------------------------------------------------------------------------------

%% Example of function

% % Sample Data
% x1 = 0.01:0.01:1;
% y1 = [sin(pi*x1) zeros(1,20)];
% x2 = x1+0.2;
% y2 = [zeros(1,20) sin(pi*x1)];
% y_d = [y2(y2<y1) y1(y1<y2)];
% area_int  = trapz(y_d)
% %plots in case you want to visualize
% plot(y1)
% hold on
% plot(y2)
% plot(y_d,'k-o')



% %Plot each finger from trial seperately
% figure
%
% % numFingers = 10;
% counter = 0;
%
% for i = 4:13
%     counter = counter + 1;
%     subplot(5, 5, counter), plot(MOV{1,1} (:,i))
%
%     axis([0 1302 0 2])
% end